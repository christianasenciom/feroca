<template>
  <div v-loading="loading"  element-loading-text="Cargando...">
    <el-row :gutter="12">
      <el-col :xs="24" :sm="24" :md="24" class="actions-component">
        <el-input
          v-model="query.keyword"
          placeholder="Buscar por nombre"
          @change="getLista"
          clearable
        >
          <template #append>
            <el-button @click="getLista">
              <template #icon>
                <v-icon name="hi-search" class="pointer" />
              </template>
            </el-button>
          </template>
        </el-input>
      </el-col>
    </el-row>
    <el-table
      :data="tableData"
      :border="true"
      style="width: 100%; margin-top: 15px !important; font-size: 12px;"
      header-row-class-name="table-header-custom"
      row-class-name="table-row-custom"
    >
      <el-table-column type="index" label="#" width="40" />
      <el-table-column prop="persona.docIdentidad" label="DNI" width="100"/>
      <el-table-column prop="persona.nombre_completo" label="Persona" width="200"/>
<!--      <el-table-column prop="persona.email" label="Email" />-->
      <el-table-column prop="persona.genero" label="Sexo" width="60">
        <template #default="scope">
          <el-tag v-if="scope.row.persona.genero === 'MASCULINO'">M</el-tag>
          <el-tag v-else>F</el-tag>
        </template>
      </el-table-column>
      <el-table-column prop="persona.celular" label="Celular" />
<!--      <el-table-column prop="persona.direccion" label="Dirección" />-->
      <el-table-column prop="estado" label="Estado">
        <template #default="scope">
<!--          {{ scope.row.estado ? 'Activo' : 'Inactivo' }}-->
          <el-tag v-if="scope.row.estado" type="success">Activo</el-tag>
          <el-tag v-else type="danger">Inactivo</el-tag>
        </template>
      </el-table-column>
      <el-table-column align="center" width="150" fixed="right">
        <template #header>
            <el-button type="primary" class="ache-background-color-template" :icon="Plus" @click="handleCommandOpciones({ action: 'ADD' })" v-if="!isActionDisabled('pub.rondero.crear')">
              Agregar
            </el-button>
        </template>
        <template #default="scope">
          <el-tooltip
              class="box-item"
              effect="dark"
              content="Ver Carnet"
              placement="top-start"
          >
<!--          <el-icon size="20" style="margin-right: 10px; cursor: pointer;" @click="handleCommandAcciones({ item: scope.row, action: 'CARNET' })" v-if="!isActionDisabled('pub.rondero.actualizar')" color="#1890ff"><Tickets /></el-icon>-->
            <el-button :icon="Tickets" circle @click="handleCommandAcciones({ item: scope.row, action: 'EDIT' })" v-if="!isActionDisabled('pub.rondero.actualizar')" color="#1890ff"/>
          </el-tooltip>
          <el-tooltip
              class="box-item"
              effect="dark"
              content="Editar"
              placement="top-start"
          >
<!--          <el-icon size="20" style="margin-right: 10px; cursor: pointer;" @click="handleCommandAcciones({ item: scope.row, action: 'EDIT' })" v-if="!isActionDisabled('pub.rondero.actualizar')" color="#E3CB2DFF"><Edit /></el-icon>-->
            <el-button :icon="Edit" circle  @click="handleCommandAcciones({ item: scope.row, action: 'EDIT' })" v-if="!isActionDisabled('pub.rondero.actualizar')" type="warning"/>

          </el-tooltip>
          <slot v-if="!isActionDisabled('pub.rondero.eliminar')">
            <el-tooltip
                class="box-item"
                effect="dark"
                content="Desactivar"
                placement="top-start"
                v-if="scope.row.estado"
            >
<!--              <el-icon size="20" style="margin-right: 10px; cursor: pointer;" @click="handleCommandAcciones({ item: scope.row, action: 'DESACTIVAR' })" color="red"><Close /></el-icon>-->
              <el-button :icon="Close" circle @click="handleCommandAcciones({ item: scope.row, action: 'DESACTIVAR' })" color="red"/>
            </el-tooltip>
            <el-tooltip
                class="box-item"
                effect="dark"
                content="Activar"
                placement="top-start"
                v-else
            >
<!--              <el-icon  size="20" style="margin-right: 10px; cursor: pointer;" @click="handleCommandAcciones({ item: scope.row, action: 'ACTIVAR' })" color="green"><Check /></el-icon>-->
              <el-button :icon="Check" circle @click="handleCommandAcciones({ item: scope.row, action: 'ACTIVAR' })" color="green"/>
            </el-tooltip>
          </slot>
        </template>
      </el-table-column>
    </el-table>
    <el-divider />
    <el-row type="flex" justify="center">
      <el-pagination
          style="font-size: 12px;"
        v-model:current-page="query.page"
        v-model:page-size="query.limit"
        :total="total"
        :page-sizes="[10, 15, 25, 50]"
        layout="total, sizes, prev, pager, next, jumper"
        background
        @size-change="getLista"
        @current-change="getLista"
      />
    </el-row>
    <el-dialog top="5vh" v-model="openDialogCreate" :width="calcularAnchoDialog('75%','98%')">
      <template #header>Nuevo Rondero<hr style="border-top: 1px solid #ececec;"></template>

      <create-rondero @close="handleCloseCreate" />
    </el-dialog>
    <el-dialog top="5vh" v-model="openDialogEdit" :width="calcularAnchoDialog('75%','98%')" :before-close="bcDialogEdit">
      <template #header>
        Editar Rondero
        <hr style="border-top: 1px solid #ececec;">
      </template>

      <edit-rondero :id-rondero="idItemToEdit" @close="handleCloseEdit"  />
    </el-dialog>
  </div>
</template>

<script setup>
import Resource from '@/api/resource'
import {Delete, Check, Plus, Tickets, Edit, Close} from '@element-plus/icons-vue'
import { ElMessageBox, ElNotification } from 'element-plus'
import { nextTick, onMounted, reactive, ref, markRaw } from 'vue';
import RonderoRequest from '@/api/publico/rondero';
import { calcularAnchoDialog } from '@/utils/responsive';
import { useAuthStore } from "@/stores/AuthStore";
import CreateRondero from "@/views/admin/publico/ronderos/components/CreateRondero.vue";
import EditRondero from "@/views/admin/publico/ronderos/components/EditRondero.vue";
import VIcon from "@/components/Icons/SvgIcon.vue";
const estadoRonderoResource = new Resource('publico/ronderos');
const ronderoCarnetResource = new Resource('generar-carnet');

const ronderoRequest = new RonderoRequest();
const authStore = useAuthStore()
const validPermision = authStore.validPermision

const loading = ref(false);
const openDialogCreate = ref(false);
const openDialogEdit = ref(false);
const tableData = ref([]);
const total = ref(0);
const query = reactive({
  keyword: '',
  limit: 8,
  page: 1,
});
const idItemToEdit = ref(0);

onMounted(() => {
  getLista()
})

const getLista = () => {
  loading.value = true;
  ronderoRequest
    .list(query)
    .then((response) => {
      const { data, meta } = response;
      tableData.value = data;
      total.value = meta.total;
      loading.value = false;
    })
    .catch((error) => {
      console.log(error);
      loading.value = false;
    });
};

const addItem = () => {
  openDialogCreate.value = true
}

const handleCloseCreate = (status) => {
  if (status == 'success') getLista();
  openDialogCreate.value = false;
};

const handleCloseEdit = (status) => {
  if (status == 'success') getLista();
  idItemToEdit.value = 0;
  openDialogEdit.value = false;
  // console.log(idItemToEdit.value)
};

const handleCommandOpciones = ({ action }) => {
  // console.log(item, action )
  if (action === 'ADD' && validPermision('pub.rondero.crear')) {
    addItem()
  } else {
    ElNotification({message: 'Usted no tiene permiso para realizar esta acción', type: 'info' })
  }
};

const handleCommandAcciones = ({ item, action }) => {
  // console.log(item, action )
  if (action == 'CARNET' && validPermision('pub.rondero.actualizar')) {
    idItemToEdit.value = item.id;
    nextTick(() => {
      loading.value = true;
      ElNotification({
        title: 'Generando Carnet de Rondero',
        message: 'Espere un momento...',
        type: 'success',
        duration: 3000,
      });
      ronderoCarnetResource
          .generarPDF({ id: item.id, url_front: window.location.origin  })
          .then((response) => {
            console.log(response)
            // const blob = new Blob([response], { type: 'application/pdf' });
            // const url = window.URL.createObjectURL(blob);
            // window.open(url, '_blank');  // Open the generated PDF in a new tab

            const blob = new Blob([response], { type: 'application/pdf' });
            const url = window.URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `carnet_rondero_${item.id}.pdf`;
            link.style.display = 'none';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            // Optional: revoke the object URL after some time to release memory
            setTimeout(() => URL.revokeObjectURL(url), 10000);
            loading.value = false;
          })
          .catch((error) => {
            console.log(error)
            loading.value = false;
          })
          .finally(() => {
            loading.value = false;
          });
    });
  }
  else if (action == 'EDIT' && validPermision('pub.rondero.actualizar')) {
    idItemToEdit.value = item.id;
    nextTick(() => {
      openDialogEdit.value = true;
    });
  }
  else if (action == 'DELETE' && validPermision('pub.rondero.eliminar')) {
    const msg = `
    ¿Seguro que desea eliminar el registro?<br /><br />
    ${item.persona.docIdentidad}
    `
    ElMessageBox.confirm(msg, 'Atención', {
      top: '5vh',
      icon: markRaw(Delete),
      confirmButtonText: 'Sí',
      cancelButtonText: 'Cancelar',
      type: 'warning',
      dangerouslyUseHTMLString: true
    })
      .then(() => {
        ronderoRequest
          .destroy(item.id)
          .then((response) => {
            ElNotification({
              title: 'Rondero eliminado',
              type: 'success',
              duration: 2000,
            });
            console.log(response)
            getLista();
          })
          .catch((error) => console.log(error));
      })
      .catch((error) => {
        console.log(error);
      });
  }
  else if (action == 'DESACTIVAR' && validPermision('pub.rondero.eliminar')) {
    const msg = `
    ¿Seguro que desea desactivar el registro?<br /><br />
    ${item.persona.docIdentidad}
    `
    ElMessageBox.confirm(msg, 'Atención', {
      top: '5vh',
      icon: markRaw(Delete),
      confirmButtonText: 'Sí',
      cancelButtonText: 'Cancelar',
      type: 'warning',
      dangerouslyUseHTMLString: true
    })
      .then(() => {
        estadoRonderoResource
          .inactivar(item.id)
          .then((response) => {
            ElNotification({
              title: 'Rondero eliminado',
              type: 'success',
              duration: 2000,
            });
            console.log(response)
            getLista();
          })
          .catch((error) => console.log(error));
      })
      .catch((error) => {
        console.log(error);
      });
  }
  else if (action == 'ACTIVAR' && validPermision('pub.rondero.eliminar')) {
    const msg = `
    ¿Seguro que desea Activar el registro?<br /><br />
    ${item.persona.docIdentidad}
    `
    ElMessageBox.confirm(msg, 'Atención', {
      top: '5vh',
      icon: markRaw(Delete),
      confirmButtonText: 'Sí',
      cancelButtonText: 'Cancelar',
      type: 'warning',
      dangerouslyUseHTMLString: true
    })
      .then(() => {
        estadoRonderoResource
          .activar(item.id)
          .then((response) => {
            ElNotification({
              title: 'Rondero Activo',
              type: 'success',
              duration: 2000,
            });
            console.log(response)
            getLista();
          })
          .catch((error) => console.log(error));
      })
      .catch((error) => {
        console.log(error);
      });
  }
};

const isActionDisabled = (action) => {
  return !validPermision(action.toLowerCase());
}

const bcDialogEdit = (done) => {
  done()
  idItemToEdit.value = 0
  openDialogEdit.value = false
}
</script>
