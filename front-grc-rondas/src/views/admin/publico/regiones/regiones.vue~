<template>
  <div>
    <div class="el-header">
      <h3>Lista de Estados TUC</h3>
      <div class="filter-container" style="float: right">
        <el-input v-model="listQuery.keybuscar" placeholder="Buscar" class="input-with-select" clearable
          style="max-width: 600px" @clear="handleBuscarDatos" @keyup.enter="handleBuscarDatos">
          <template #append>
            <el-button type="primary" :icon="Search" @click="handleBuscarDatos">
              <span style="vertical-align: middle"> Buscar </span>
            </el-button>
          </template>
        </el-input>
      </div>
    </div>
    <el-table border fit :data="tableData" class="py-4" v-loading="listLoading">
      <el-table-column label="ID" prop="id" align="center" width="70" />
      <el-table-column label="Estado TUC" prop="descripcion" />
      <el-table-column align="right" width="200" fixed="right">
        <template #header>
          <el-button type="primary" class="ache-background-color-template" :icon="Plus" @click="openFormCreate">
            Agregar
          </el-button>
        </template>
        <template #default="scope">
          <el-button type="warning" :icon="Edit" size="small" @click="openFormEditar(scope.row.id)">
            Editar
          </el-button>
          <el-button size="small" type="danger" @click="accionEliminarRegistro(scope.row.id, scope.row.descripcion)"
            :icon="Delete">
            Eliminar
          </el-button>
        </template>
      </el-table-column>
    </el-table>
    <div class="paging">
      <el-pagination v-if="meta.total > listQuery.limit" background v-model:currentPage="meta.current_page"
        layout="total, prev, next, pager" :total="meta.total" @current-change="handleCurrentChange"
        :page-size="meta.per_page" />
    </div>

    <!-- Dialogo para editar o crear estado TUC -->
    <el-dialog v-model="visibleDialogForm" :close-on-click-modal="false" top="7vh" width="500" :title="titleDialogForm">
      <div>
        <el-form ref="formCreateEditEstadoTUC" v-loading="loadingSaveDialogForm" :model="modelEstadoTUC"
          :rules="reglasValidacion" status-icon label-width="120px" label-position="top" v-on:submit.prevent>
          <el-form-item label="Descripci칩n" prop="descripcion">
            <el-input ref="descripcionField" v-model="modelEstadoTUC.descripcion" type="text" autocomplete="off"
              placeholder="Estado TUC" />
          </el-form-item>
        </el-form>
      </div>
      <template #footer>
        <div class="dialog-footer">
          <el-button type="primary" @click="saveFormCreateEdit('formCreateEditEstadoTUC')">
            Guardar
          </el-button>
          <el-button type="danger" @click="resetFormCreateEdit('formCreateEditEstadoTUC')">Resetear</el-button>
        </div>
      </template>
    </el-dialog>

  </div>
</template>



<style scoped>
.paging {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-wrap: nowrap;
  flex-direction: row;
  align-content: flex-start;
  padding-top: 20px;
}
</style>
<script>
import { ref, reactive, onMounted, nextTick } from 'vue';
import { ElMessage, ElMessageBox } from 'element-plus';
import { Search, Plus, Edit, Delete } from '@element-plus/icons-vue';

import {useAuthStore} from '../../../stores/auth';
import EstadoTUCResource from '@/api/infracciones/estadotuc';


export default {
  name: 'EstadoTUC',
  setup() {
    const estadoTUCResource = new EstadoTUCResource();
    const authStore = useAuthStore()

    const formCreateEditEstadoTUC = ref(null);
    const descripcionField = ref(null);

    const modelEstadoTUC = reactive({
      id: undefined,
      descripcion: '',
    });
    const reglasValidacion = {
      descripcion: [
        { required: true, message: 'El campo es requerido', trigger: 'blur' }
      ],
    };


    const tableData = ref([]);
    const meta = ref({});
    const listLoading = ref(true);

    const listQuery = reactive({
      page: 1,
      limit: 10,
      keybuscar: ''
    });

    const visibleDialogForm = ref(false);
    const titleDialogForm = ref('');
    const loadingSaveDialogForm = ref(false);

    const openFormCreate = () => {
      resetModelEstadoTUC();
      titleDialogForm.value = 'Registrar Estado TUC';
      visibleDialogForm.value = true;
      nextTick(() => {
        formCreateEditEstadoTUC.value?.clearValidate();
        descripcionField.value?.focus();
      });
    };

    const openFormEditar = async (id) => {
      titleDialogForm.value = 'Editar Estado TUC';
      visibleDialogForm.value = true;
      loadingSaveDialogForm.value = true;
      try {
        const { data } = await estadoTUCResource.get(id);
        Object.assign(modelEstadoTUC, data);
        nextTick(() => {
          formCreateEditEstadoTUC.value?.clearValidate();
          descripcionField.value?.focus();
        });
      } catch (error) {
        visibleDialogForm.value = false;
        ElMessage.info('Error al obtener datos');
      } finally {
        loadingSaveDialogForm.value = false;
      }
    };

    const resetModelEstadoTUC = () => {
      Object.assign(modelEstadoTUC, {
        id: undefined,
        descripcion: '',
      });
    };

    const saveFormCreateEdit = () => {
      formCreateEditEstadoTUC.value?.validate((valid) => {
        if (valid) {
          if (modelEstadoTUC.id === undefined) {
            saveDataForm();
          } else {
            saveEditDataForm();
          }
        } else {
          console.log('Formulario no v치lido');
        }
      });
    };


    const saveDataForm = () => {
      loadingSaveDialogForm.value = true;
      estadoTUCResource.store(modelEstadoTUC)
        .then(() => {
          ElMessage.success('Datos guardados correctamente');
          resetModelEstadoTUC();
          visibleDialogForm.value = false;
          fetchEstadoTUCData();
        })
        .catch((error) => {
          console.error('Error saving data:', error);
          ElMessage.error('Se ha producido un error al guardar');
        })
        .finally(() => {
          loadingSaveDialogForm.value = false;
        });
    };

    const saveEditDataForm = () => {
      loadingSaveDialogForm.value = true;
      estadoTUCResource.update(modelEstadoTUC.id, modelEstadoTUC)
        .then(() => {
          ElMessage.success('Datos actualizados correctamente');
          resetModelEstadoTUC();
          visibleDialogForm.value = false;
          fetchEstadoTUCData();
        })
        .catch((error) => {
          console.error('Error updating data:', error);
          ElMessage.error('Se ha producido un error al actualizar');
        })
        .finally(() => {
          loadingSaveDialogForm.value = false;
        });
    };

    const accionEliminarRegistro = (id, nombre) => {
      ElMessageBox.confirm(
        `Seguro que desea eliminar el registro <em>${nombre}</em>?`,
        'Atenci칩n',
        {
          confirmButtonText: 'Si, eliminar',
          cancelButtonText: 'Cancelar',
          type: 'warning',
          dangerouslyUseHTMLString: true
        }
      )
        .then(() => {
          estadoTUCResource.destroy(id)
            .then(() => {
              ElMessage.success('Registro eliminado');
              fetchEstadoTUCData();
            })
            .catch((error) => {
              console.error('Error deleting data:', error);
              ElMessage.error('Se ha producido un error al eliminar');
            });
        })
        .catch(() => {
          ElMessage.info('Operaci칩n cancelada');
        });
    };

    const resetFormCreateEdit = () => {
      formCreateEditEstadoTUC.value?.resetFields();
      nextTick(() => {
        descripcionField.value?.focus();
      });
    };


    const handleBuscarDatos = () => {
      listQuery.page = 1;
      fetchEstadoTUCData();
    };

    const handleCurrentChange = (val) => {
      listQuery.page = val;
      fetchEstadoTUCData();
    };

    const fetchEstadoTUCData = () => {
      listLoading.value = true;
      estadoTUCResource.list(listQuery)
        .then(response => {
          tableData.value = response.data;
          meta.value = response.meta;
        })
        .catch(error => {
          console.error('Error fetching data:', error);
          ElMessage.error('Error al obtener datos');
        })
        .finally(() => {
          listLoading.value = false;
        });
    };

    onMounted(fetchEstadoTUCData);

    return {
      authStore,
      modelEstadoTUC,
      reglasValidacion, // reglas de validacion
      tableData,
      meta,
      listLoading,
      listQuery,
      visibleDialogForm,
      titleDialogForm,
      loadingSaveDialogForm,
      formCreateEditEstadoTUC,
      descripcionField,
      openFormCreate,
      openFormEditar,
      saveFormCreateEdit,
      accionEliminarRegistro,
      resetFormCreateEdit,
      handleBuscarDatos,
      handleCurrentChange,

      Search,
      Plus,
      Edit,
      Delete,

    };
  }
};
</script>
